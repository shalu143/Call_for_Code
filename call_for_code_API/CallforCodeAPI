#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 25 13:48:33 2021

@author: shalutyagi
"""

from flask import Flask, jsonify
import pandas as pd
import numpy as np
import camelot
from fuzzywuzzy import process
import os



os.chdir("/Users/Shared/call_for_code_final")

ESG_data=pd.read_csv("database/ESG_Db.csv")
esg_score=pd.read_csv ("database/ESG_score.csv")
watson_score=pd.read_csv ("database/watson_score.csv")
#watson_score=watson_score.drop(labels=4, axis=0)

app=Flask(__name__)


@app.route('/', methods=["POST"])
def add_entry():
    return("Welcome")

def read_bill(pdf):
    abc=camelot.read_pdf(pdf)
    t=abc[0].df
    if t[1][0]=='Tax\nAmount':
        s2=t[0][1]
    else:
        s2=t[1][1]
    return s2


def search_db(name):
    df=ESG_data
    s1=ESG_data["NAME OF COMPANY" ]
    s3=name.split()
    ls=[]
    for i in s1:
        z=process.extractOne(i, s3)
        ls.append(z)
    Name=pd.DataFrame([[i, value [1]] for i, value in enumerate (ls) if value[1]>=90])
    if Name.shape[0]>0:
        Name.columns=["index","match"]
        Name1=Name[Name["match"]==max(Name[ "match"])]
        Name_of_company=s1[Name1["index"]].values[0]
        ESG_Score=df[df["NAME OF COMPANY" ]==Name_of_company]["ESG Score"].values[0]
        sentiment_score=df[df["NAME OF COMPANY"]==Name_of_company]["Watson Discovery"].values[0]
        return([Name_of_company, ESG_Score, sentiment_score])
    else:
        print("we cannot detect the product company. Please enter it manually:")
        
def Green_points(name):
    df_esg=esg_score
    df_watson=watson_score
    esgscore=search_db(name)[1]
    sentiment=search_db(name)[2]
    bins_esg=(esg_score["ESG"].apply(lambda x: x.split()[0]).apply(lambda x: int(x)))
    value_esg=np.digitize(esgscore, bins_esg) -1
    bins_senti=(watson_score["Discovery Sentiment"].apply(lambda x: x.split()[0]).apply(lambda x: int(x)))
    value_senti=np.digitize(sentiment, bins_senti)
    green_point_esg= df_esg.iloc[value_esg]["Green Points"]
    green_point_senti=df_watson.iloc[value_senti]["Green Points"]
    final_point= max(green_point_esg, green_point_senti)
    return ([final_point,esgscore,sentiment])      
        
@app.route('/products_detected', methods=["POST","GET"])
def product(pdf):
    name_pro=read_bill(pdf)
    return jsonify(name_pro)


@app.route('/Score_bill', methods=["POST","GET"])
def score_bill(pdf):
    name=read_bill(pdf)
    green=Green_points(name)[0]
    esg=Green_points(name)[1]
    senti=Green_points(name)[2]
    content={
        "green_points": green,
        "esg": esg,
        "senti": senti
        
        }
    return jsonify(content)


@app.route('/Score_search', methods=["POST","GET"])
def score_single(name):
    esg=search_db(name)[1]
    senti=search_db(name)[2]
    content={
        "esg": esg,
        "senti":senti}
    return jsonify(content)




if __name__ == "__main__":
    app.run()
    

